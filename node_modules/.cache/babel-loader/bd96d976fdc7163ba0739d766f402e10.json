{"ast":null,"code":"'use strict';\n\nmodule.exports = dart;\ndart.displayName = 'dart';\ndart.aliases = [];\n\nfunction dart(Prism) {\n  ;\n\n  (function (Prism) {\n    var keywords = [/\\b(?:async|sync|yield)\\*/, /\\b(?:abstract|assert|async|await|break|case|catch|class|const|continue|covariant|default|deferred|do|dynamic|else|enum|export|extension|external|extends|factory|final|finally|for|get|hide|if|implements|interface|import|in|library|mixin|new|null|on|operator|part|rethrow|return|set|show|static|super|switch|sync|this|throw|try|typedef|var|void|while|with|yield)\\b/]; // Handles named imports, such as http.Client\n\n    var packagePrefix = /(^|[^\\w.])(?:[a-z]\\w*\\s*\\.\\s*)*(?:[A-Z]\\w*\\s*\\.\\s*)*/.source; // based on the dart naming conventions\n\n    var className = {\n      pattern: RegExp(packagePrefix + /[A-Z](?:[\\d_A-Z]*[a-z]\\w*)?\\b/.source),\n      lookbehind: true,\n      inside: {\n        namespace: {\n          pattern: /^[a-z]\\w*(?:\\s*\\.\\s*[a-z]\\w*)*(?:\\s*\\.)?/,\n          inside: {\n            punctuation: /\\./\n          }\n        }\n      }\n    };\n    Prism.languages.dart = Prism.languages.extend('clike', {\n      string: [{\n        pattern: /r?(\"\"\"|''')[\\s\\S]*?\\1/,\n        greedy: true\n      }, {\n        pattern: /r?([\"'])(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/,\n        greedy: true\n      }],\n      'class-name': [className, {\n        // variables and parameters\n        // this to support class names (or generic parameters) which do not contain a lower case letter (also works for methods)\n        pattern: RegExp(packagePrefix + /[A-Z]\\w*(?=\\s+\\w+\\s*[;,=()])/.source),\n        lookbehind: true,\n        inside: className.inside\n      }],\n      keyword: keywords,\n      operator: /\\bis!|\\b(?:as|is)\\b|\\+\\+|--|&&|\\|\\||<<=?|>>=?|~(?:\\/=?)?|[+\\-*\\/%&^|=!<>]=?|\\?/\n    });\n    Prism.languages.insertBefore('dart', 'function', {\n      metadata: {\n        pattern: /@\\w+/,\n        alias: 'symbol'\n      }\n    });\n    Prism.languages.insertBefore('dart', 'class-name', {\n      generics: {\n        pattern: /<(?:[\\w\\s,.&?]|<(?:[\\w\\s,.&?]|<(?:[\\w\\s,.&?]|<[\\w\\s,.&?]*>)*>)*>)*>/,\n        inside: {\n          'class-name': className,\n          keyword: keywords,\n          punctuation: /[<>(),.:]/,\n          operator: /[?&|]/\n        }\n      }\n    });\n  })(Prism);\n}","map":{"version":3,"sources":["/Users/jianlan/Documents/GitHub/bayer-frontend/node_modules/refractor/lang/dart.js"],"names":["module","exports","dart","displayName","aliases","Prism","keywords","packagePrefix","source","className","pattern","RegExp","lookbehind","inside","namespace","punctuation","languages","extend","string","greedy","keyword","operator","insertBefore","metadata","alias","generics"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,OAAP,GAAiBC,IAAjB;AACAA,IAAI,CAACC,WAAL,GAAmB,MAAnB;AACAD,IAAI,CAACE,OAAL,GAAe,EAAf;;AACA,SAASF,IAAT,CAAcG,KAAd,EAAqB;AACnB;;AAAC,GAAC,UAAUA,KAAV,EAAiB;AACjB,QAAIC,QAAQ,GAAG,CACb,0BADa,EAEb,4WAFa,CAAf,CADiB,CAIf;;AACF,QAAIC,aAAa,GAAG,uDACjBC,MADH,CALiB,CAMP;;AACV,QAAIC,SAAS,GAAG;AACdC,MAAAA,OAAO,EAAEC,MAAM,CAACJ,aAAa,GAAG,gCAAgCC,MAAjD,CADD;AAEdI,MAAAA,UAAU,EAAE,IAFE;AAGdC,MAAAA,MAAM,EAAE;AACNC,QAAAA,SAAS,EAAE;AACTJ,UAAAA,OAAO,EAAE,0CADA;AAETG,UAAAA,MAAM,EAAE;AACNE,YAAAA,WAAW,EAAE;AADP;AAFC;AADL;AAHM,KAAhB;AAYAV,IAAAA,KAAK,CAACW,SAAN,CAAgBd,IAAhB,GAAuBG,KAAK,CAACW,SAAN,CAAgBC,MAAhB,CAAuB,OAAvB,EAAgC;AACrDC,MAAAA,MAAM,EAAE,CACN;AACER,QAAAA,OAAO,EAAE,uBADX;AAEES,QAAAA,MAAM,EAAE;AAFV,OADM,EAKN;AACET,QAAAA,OAAO,EAAE,oCADX;AAEES,QAAAA,MAAM,EAAE;AAFV,OALM,CAD6C;AAWrD,oBAAc,CACZV,SADY,EAEZ;AACE;AACA;AACAC,QAAAA,OAAO,EAAEC,MAAM,CACbJ,aAAa,GAAG,+BAA+BC,MADlC,CAHjB;AAMEI,QAAAA,UAAU,EAAE,IANd;AAOEC,QAAAA,MAAM,EAAEJ,SAAS,CAACI;AAPpB,OAFY,CAXuC;AAuBrDO,MAAAA,OAAO,EAAEd,QAvB4C;AAwBrDe,MAAAA,QAAQ,EACN;AAzBmD,KAAhC,CAAvB;AA2BAhB,IAAAA,KAAK,CAACW,SAAN,CAAgBM,YAAhB,CAA6B,MAA7B,EAAqC,UAArC,EAAiD;AAC/CC,MAAAA,QAAQ,EAAE;AACRb,QAAAA,OAAO,EAAE,MADD;AAERc,QAAAA,KAAK,EAAE;AAFC;AADqC,KAAjD;AAMAnB,IAAAA,KAAK,CAACW,SAAN,CAAgBM,YAAhB,CAA6B,MAA7B,EAAqC,YAArC,EAAmD;AACjDG,MAAAA,QAAQ,EAAE;AACRf,QAAAA,OAAO,EACL,qEAFM;AAGRG,QAAAA,MAAM,EAAE;AACN,wBAAcJ,SADR;AAENW,UAAAA,OAAO,EAAEd,QAFH;AAGNS,UAAAA,WAAW,EAAE,WAHP;AAINM,UAAAA,QAAQ,EAAE;AAJJ;AAHA;AADuC,KAAnD;AAYD,GAhEA,EAgEEhB,KAhEF;AAiEF","sourcesContent":["'use strict'\n\nmodule.exports = dart\ndart.displayName = 'dart'\ndart.aliases = []\nfunction dart(Prism) {\n  ;(function (Prism) {\n    var keywords = [\n      /\\b(?:async|sync|yield)\\*/,\n      /\\b(?:abstract|assert|async|await|break|case|catch|class|const|continue|covariant|default|deferred|do|dynamic|else|enum|export|extension|external|extends|factory|final|finally|for|get|hide|if|implements|interface|import|in|library|mixin|new|null|on|operator|part|rethrow|return|set|show|static|super|switch|sync|this|throw|try|typedef|var|void|while|with|yield)\\b/\n    ] // Handles named imports, such as http.Client\n    var packagePrefix = /(^|[^\\w.])(?:[a-z]\\w*\\s*\\.\\s*)*(?:[A-Z]\\w*\\s*\\.\\s*)*/\n      .source // based on the dart naming conventions\n    var className = {\n      pattern: RegExp(packagePrefix + /[A-Z](?:[\\d_A-Z]*[a-z]\\w*)?\\b/.source),\n      lookbehind: true,\n      inside: {\n        namespace: {\n          pattern: /^[a-z]\\w*(?:\\s*\\.\\s*[a-z]\\w*)*(?:\\s*\\.)?/,\n          inside: {\n            punctuation: /\\./\n          }\n        }\n      }\n    }\n    Prism.languages.dart = Prism.languages.extend('clike', {\n      string: [\n        {\n          pattern: /r?(\"\"\"|''')[\\s\\S]*?\\1/,\n          greedy: true\n        },\n        {\n          pattern: /r?([\"'])(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/,\n          greedy: true\n        }\n      ],\n      'class-name': [\n        className,\n        {\n          // variables and parameters\n          // this to support class names (or generic parameters) which do not contain a lower case letter (also works for methods)\n          pattern: RegExp(\n            packagePrefix + /[A-Z]\\w*(?=\\s+\\w+\\s*[;,=()])/.source\n          ),\n          lookbehind: true,\n          inside: className.inside\n        }\n      ],\n      keyword: keywords,\n      operator:\n        /\\bis!|\\b(?:as|is)\\b|\\+\\+|--|&&|\\|\\||<<=?|>>=?|~(?:\\/=?)?|[+\\-*\\/%&^|=!<>]=?|\\?/\n    })\n    Prism.languages.insertBefore('dart', 'function', {\n      metadata: {\n        pattern: /@\\w+/,\n        alias: 'symbol'\n      }\n    })\n    Prism.languages.insertBefore('dart', 'class-name', {\n      generics: {\n        pattern:\n          /<(?:[\\w\\s,.&?]|<(?:[\\w\\s,.&?]|<(?:[\\w\\s,.&?]|<[\\w\\s,.&?]*>)*>)*>)*>/,\n        inside: {\n          'class-name': className,\n          keyword: keywords,\n          punctuation: /[<>(),.:]/,\n          operator: /[?&|]/\n        }\n      }\n    })\n  })(Prism)\n}\n"]},"metadata":{},"sourceType":"script"}