{"ast":null,"code":"'use strict';\n\nmodule.exports = http;\nhttp.displayName = 'http';\nhttp.aliases = [];\n\nfunction http(Prism) {\n  ;\n\n  (function (Prism) {\n    Prism.languages.http = {\n      'request-line': {\n        pattern: /^(?:GET|HEAD|POST|PUT|DELETE|CONNECT|OPTIONS|TRACE|PATCH|PRI|SEARCH)\\s(?:https?:\\/\\/|\\/)\\S*\\sHTTP\\/[0-9.]+/m,\n        inside: {\n          // HTTP Method\n          method: {\n            pattern: /^[A-Z]+\\b/,\n            alias: 'property'\n          },\n          // Request Target e.g. http://example.com, /path/to/file\n          'request-target': {\n            pattern: /^(\\s)(?:https?:\\/\\/|\\/)\\S*(?=\\s)/,\n            lookbehind: true,\n            alias: 'url',\n            inside: Prism.languages.uri\n          },\n          // HTTP Version\n          'http-version': {\n            pattern: /^(\\s)HTTP\\/[0-9.]+/,\n            lookbehind: true,\n            alias: 'property'\n          }\n        }\n      },\n      'response-status': {\n        pattern: /^HTTP\\/[0-9.]+ \\d+ .+/m,\n        inside: {\n          // HTTP Version\n          'http-version': {\n            pattern: /^HTTP\\/[0-9.]+/,\n            alias: 'property'\n          },\n          // Status Code\n          'status-code': {\n            pattern: /^(\\s)\\d+(?=\\s)/,\n            lookbehind: true,\n            alias: 'number'\n          },\n          // Reason Phrase\n          'reason-phrase': {\n            pattern: /^(\\s).+/,\n            lookbehind: true,\n            alias: 'string'\n          }\n        }\n      },\n      // HTTP header name\n      'header-name': {\n        pattern: /^[\\w-]+:(?=.)/m,\n        alias: 'keyword'\n      }\n    }; // Create a mapping of Content-Type headers to language definitions\n\n    var langs = Prism.languages;\n    var httpLanguages = {\n      'application/javascript': langs.javascript,\n      'application/json': langs.json || langs.javascript,\n      'application/xml': langs.xml,\n      'text/xml': langs.xml,\n      'text/html': langs.html,\n      'text/css': langs.css\n    }; // Declare which types can also be suffixes\n\n    var suffixTypes = {\n      'application/json': true,\n      'application/xml': true\n    };\n    /**\n     * Returns a pattern for the given content type which matches it and any type which has it as a suffix.\n     *\n     * @param {string} contentType\n     * @returns {string}\n     */\n\n    function getSuffixPattern(contentType) {\n      var suffix = contentType.replace(/^[a-z]+\\//, '');\n      var suffixPattern = '\\\\w+/(?:[\\\\w.-]+\\\\+)+' + suffix + '(?![+\\\\w.-])';\n      return '(?:' + contentType + '|' + suffixPattern + ')';\n    } // Insert each content type parser that has its associated language\n    // currently loaded.\n\n\n    var options;\n\n    for (var contentType in httpLanguages) {\n      if (httpLanguages[contentType]) {\n        options = options || {};\n        var pattern = suffixTypes[contentType] ? getSuffixPattern(contentType) : contentType;\n        options[contentType.replace(/\\//g, '-')] = {\n          pattern: RegExp('(content-type:\\\\s*' + pattern + '(?:(?:\\\\r\\\\n?|\\\\n).+)*)(?:\\\\r?\\\\n|\\\\r){2}[\\\\s\\\\S]*', 'i'),\n          lookbehind: true,\n          inside: httpLanguages[contentType]\n        };\n      }\n    }\n\n    if (options) {\n      Prism.languages.insertBefore('http', 'header-name', options);\n    }\n  })(Prism);\n}","map":{"version":3,"sources":["/Users/jianlan/Documents/GitHub/bayer-frontend/node_modules/refractor/lang/http.js"],"names":["module","exports","http","displayName","aliases","Prism","languages","pattern","inside","method","alias","lookbehind","uri","langs","httpLanguages","javascript","json","xml","html","css","suffixTypes","getSuffixPattern","contentType","suffix","replace","suffixPattern","options","RegExp","insertBefore"],"mappings":"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","sourcesContent":["'use strict'\n\nmodule.exports = http\nhttp.displayName = 'http'\nhttp.aliases = []\nfunction http(Prism) {\n  ;(function (Prism) {\n    Prism.languages.http = {\n      'request-line': {\n        pattern:\n          /^(?:GET|HEAD|POST|PUT|DELETE|CONNECT|OPTIONS|TRACE|PATCH|PRI|SEARCH)\\s(?:https?:\\/\\/|\\/)\\S*\\sHTTP\\/[0-9.]+/m,\n        inside: {\n          // HTTP Method\n          method: {\n            pattern: /^[A-Z]+\\b/,\n            alias: 'property'\n          },\n          // Request Target e.g. http://example.com, /path/to/file\n          'request-target': {\n            pattern: /^(\\s)(?:https?:\\/\\/|\\/)\\S*(?=\\s)/,\n            lookbehind: true,\n            alias: 'url',\n            inside: Prism.languages.uri\n          },\n          // HTTP Version\n          'http-version': {\n            pattern: /^(\\s)HTTP\\/[0-9.]+/,\n            lookbehind: true,\n            alias: 'property'\n          }\n        }\n      },\n      'response-status': {\n        pattern: /^HTTP\\/[0-9.]+ \\d+ .+/m,\n        inside: {\n          // HTTP Version\n          'http-version': {\n            pattern: /^HTTP\\/[0-9.]+/,\n            alias: 'property'\n          },\n          // Status Code\n          'status-code': {\n            pattern: /^(\\s)\\d+(?=\\s)/,\n            lookbehind: true,\n            alias: 'number'\n          },\n          // Reason Phrase\n          'reason-phrase': {\n            pattern: /^(\\s).+/,\n            lookbehind: true,\n            alias: 'string'\n          }\n        }\n      },\n      // HTTP header name\n      'header-name': {\n        pattern: /^[\\w-]+:(?=.)/m,\n        alias: 'keyword'\n      }\n    } // Create a mapping of Content-Type headers to language definitions\n    var langs = Prism.languages\n    var httpLanguages = {\n      'application/javascript': langs.javascript,\n      'application/json': langs.json || langs.javascript,\n      'application/xml': langs.xml,\n      'text/xml': langs.xml,\n      'text/html': langs.html,\n      'text/css': langs.css\n    } // Declare which types can also be suffixes\n    var suffixTypes = {\n      'application/json': true,\n      'application/xml': true\n    }\n    /**\n     * Returns a pattern for the given content type which matches it and any type which has it as a suffix.\n     *\n     * @param {string} contentType\n     * @returns {string}\n     */\n    function getSuffixPattern(contentType) {\n      var suffix = contentType.replace(/^[a-z]+\\//, '')\n      var suffixPattern = '\\\\w+/(?:[\\\\w.-]+\\\\+)+' + suffix + '(?![+\\\\w.-])'\n      return '(?:' + contentType + '|' + suffixPattern + ')'\n    } // Insert each content type parser that has its associated language\n    // currently loaded.\n    var options\n    for (var contentType in httpLanguages) {\n      if (httpLanguages[contentType]) {\n        options = options || {}\n        var pattern = suffixTypes[contentType]\n          ? getSuffixPattern(contentType)\n          : contentType\n        options[contentType.replace(/\\//g, '-')] = {\n          pattern: RegExp(\n            '(content-type:\\\\s*' +\n              pattern +\n              '(?:(?:\\\\r\\\\n?|\\\\n).+)*)(?:\\\\r?\\\\n|\\\\r){2}[\\\\s\\\\S]*',\n            'i'\n          ),\n          lookbehind: true,\n          inside: httpLanguages[contentType]\n        }\n      }\n    }\n    if (options) {\n      Prism.languages.insertBefore('http', 'header-name', options)\n    }\n  })(Prism)\n}\n"]},"metadata":{},"sourceType":"script"}