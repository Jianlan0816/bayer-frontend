{"ast":null,"code":"'use strict';\n\nmodule.exports = v;\nv.displayName = 'v';\nv.aliases = [];\n\nfunction v(Prism) {\n  ;\n\n  (function (Prism) {\n    var interpolationExpr = {\n      pattern: /[\\s\\S]+/,\n      inside: null\n    };\n    Prism.languages.v = Prism.languages.extend('clike', {\n      string: [{\n        pattern: /`(?:\\\\`|\\\\?[^`]{1,2})`/,\n        // using {1,2} instead of `u` flag for compatibility\n        alias: 'rune'\n      }, {\n        pattern: /r?([\"'])(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/,\n        alias: 'quoted-string',\n        greedy: true,\n        inside: {\n          interpolation: {\n            pattern: /((?:^|[^\\\\])(?:\\\\{2})*)\\$(?:\\{[^{}]*\\}|\\w+(?:\\.\\w+(?:\\([^\\(\\)]*\\))?|\\[[^\\[\\]]+\\])*)/,\n            lookbehind: true,\n            inside: {\n              'interpolation-variable': {\n                pattern: /^\\$\\w[\\s\\S]*$/,\n                alias: 'variable'\n              },\n              'interpolation-punctuation': {\n                pattern: /^\\$\\{|\\}$/,\n                alias: 'punctuation'\n              },\n              'interpolation-expression': interpolationExpr\n            }\n          }\n        }\n      }],\n      'class-name': {\n        pattern: /(\\b(?:enum|interface|struct|type)\\s+)(?:C\\.)?\\w+/,\n        lookbehind: true\n      },\n      keyword: /(?:\\b(?:as|asm|assert|atomic|break|chan|const|continue|defer|else|embed|enum|fn|for|__global|go(?:to)?|if|import|in|interface|is|lock|match|module|mut|none|or|pub|return|rlock|select|shared|sizeof|static|struct|type(?:of)?|union|unsafe)|\\$(?:if|else|for)|#(?:include|flag))\\b/,\n      number: /\\b(?:0x[a-f\\d]+(?:_[a-f\\d]+)*|0b[01]+(?:_[01]+)*|0o[0-7]+(?:_[0-7]+)*|\\d+(?:_\\d+)*(?:\\.\\d+(?:_\\d+)*)?)\\b/i,\n      operator: /~|\\?|[*\\/%^!=]=?|\\+[=+]?|-[=-]?|\\|[=|]?|&(?:=|&|\\^=?)?|>(?:>=?|=)?|<(?:<=?|=|-)?|:=|\\.\\.\\.?/,\n      builtin: /\\b(?:any(?:_int|_float)?|bool|byte(?:ptr)?|charptr|f(?:32|64)|i(?:8|16|nt|64|128)|rune|size_t|string|u(?:16|32|64|128)|voidptr)\\b/\n    });\n    interpolationExpr.inside = Prism.languages.v;\n    Prism.languages.insertBefore('v', 'operator', {\n      attribute: {\n        pattern: /(^[\\t ]*)\\[(?:deprecated|unsafe_fn|typedef|live|inline|flag|ref_only|windows_stdcall|direct_array_access)\\]/m,\n        lookbehind: true,\n        alias: 'annotation',\n        inside: {\n          punctuation: /[\\[\\]]/,\n          keyword: /\\w+/\n        }\n      },\n      generic: {\n        pattern: /<\\w+>(?=\\s*[\\)\\{])/,\n        inside: {\n          punctuation: /[<>]/,\n          'class-name': /\\w+/\n        }\n      }\n    });\n    Prism.languages.insertBefore('v', 'function', {\n      'generic-function': {\n        // e.g. foo<T>( ...\n        pattern: /\\b\\w+\\s*<\\w+>(?=\\()/,\n        inside: {\n          function: /^\\w+/,\n          generic: {\n            pattern: /<\\w+>/,\n            inside: Prism.languages.v.generic.inside\n          }\n        }\n      }\n    });\n  })(Prism);\n}","map":{"version":3,"sources":["/Users/jianlan/Documents/GitHub/site/node_modules/refractor/lang/v.js"],"names":["module","exports","v","displayName","aliases","Prism","interpolationExpr","pattern","inside","languages","extend","string","alias","greedy","interpolation","lookbehind","keyword","number","operator","builtin","insertBefore","attribute","punctuation","generic","function"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,OAAP,GAAiBC,CAAjB;AACAA,CAAC,CAACC,WAAF,GAAgB,GAAhB;AACAD,CAAC,CAACE,OAAF,GAAY,EAAZ;;AACA,SAASF,CAAT,CAAWG,KAAX,EAAkB;AAChB;;AAAC,GAAC,UAAUA,KAAV,EAAiB;AACjB,QAAIC,iBAAiB,GAAG;AACtBC,MAAAA,OAAO,EAAE,SADa;AAEtBC,MAAAA,MAAM,EAAE;AAFc,KAAxB;AAIAH,IAAAA,KAAK,CAACI,SAAN,CAAgBP,CAAhB,GAAoBG,KAAK,CAACI,SAAN,CAAgBC,MAAhB,CAAuB,OAAvB,EAAgC;AAClDC,MAAAA,MAAM,EAAE,CACN;AACEJ,QAAAA,OAAO,EAAE,wBADX;AAEE;AACAK,QAAAA,KAAK,EAAE;AAHT,OADM,EAMN;AACEL,QAAAA,OAAO,EAAE,kDADX;AAEEK,QAAAA,KAAK,EAAE,eAFT;AAGEC,QAAAA,MAAM,EAAE,IAHV;AAIEL,QAAAA,MAAM,EAAE;AACNM,UAAAA,aAAa,EAAE;AACbP,YAAAA,OAAO,EACL,qFAFW;AAGbQ,YAAAA,UAAU,EAAE,IAHC;AAIbP,YAAAA,MAAM,EAAE;AACN,wCAA0B;AACxBD,gBAAAA,OAAO,EAAE,eADe;AAExBK,gBAAAA,KAAK,EAAE;AAFiB,eADpB;AAKN,2CAA6B;AAC3BL,gBAAAA,OAAO,EAAE,WADkB;AAE3BK,gBAAAA,KAAK,EAAE;AAFoB,eALvB;AASN,0CAA4BN;AATtB;AAJK;AADT;AAJV,OANM,CAD0C;AA+BlD,oBAAc;AACZC,QAAAA,OAAO,EAAE,kDADG;AAEZQ,QAAAA,UAAU,EAAE;AAFA,OA/BoC;AAmClDC,MAAAA,OAAO,EACL,qRApCgD;AAqClDC,MAAAA,MAAM,EACJ,2GAtCgD;AAuClDC,MAAAA,QAAQ,EACN,6FAxCgD;AAyClDC,MAAAA,OAAO,EACL;AA1CgD,KAAhC,CAApB;AA4CAb,IAAAA,iBAAiB,CAACE,MAAlB,GAA2BH,KAAK,CAACI,SAAN,CAAgBP,CAA3C;AACAG,IAAAA,KAAK,CAACI,SAAN,CAAgBW,YAAhB,CAA6B,GAA7B,EAAkC,UAAlC,EAA8C;AAC5CC,MAAAA,SAAS,EAAE;AACTd,QAAAA,OAAO,EACL,8GAFO;AAGTQ,QAAAA,UAAU,EAAE,IAHH;AAITH,QAAAA,KAAK,EAAE,YAJE;AAKTJ,QAAAA,MAAM,EAAE;AACNc,UAAAA,WAAW,EAAE,QADP;AAENN,UAAAA,OAAO,EAAE;AAFH;AALC,OADiC;AAW5CO,MAAAA,OAAO,EAAE;AACPhB,QAAAA,OAAO,EAAE,oBADF;AAEPC,QAAAA,MAAM,EAAE;AACNc,UAAAA,WAAW,EAAE,MADP;AAEN,wBAAc;AAFR;AAFD;AAXmC,KAA9C;AAmBAjB,IAAAA,KAAK,CAACI,SAAN,CAAgBW,YAAhB,CAA6B,GAA7B,EAAkC,UAAlC,EAA8C;AAC5C,0BAAoB;AAClB;AACAb,QAAAA,OAAO,EAAE,qBAFS;AAGlBC,QAAAA,MAAM,EAAE;AACNgB,UAAAA,QAAQ,EAAE,MADJ;AAEND,UAAAA,OAAO,EAAE;AACPhB,YAAAA,OAAO,EAAE,OADF;AAEPC,YAAAA,MAAM,EAAEH,KAAK,CAACI,SAAN,CAAgBP,CAAhB,CAAkBqB,OAAlB,CAA0Bf;AAF3B;AAFH;AAHU;AADwB,KAA9C;AAaD,GAlFA,EAkFEH,KAlFF;AAmFF","sourcesContent":["'use strict'\n\nmodule.exports = v\nv.displayName = 'v'\nv.aliases = []\nfunction v(Prism) {\n  ;(function (Prism) {\n    var interpolationExpr = {\n      pattern: /[\\s\\S]+/,\n      inside: null\n    }\n    Prism.languages.v = Prism.languages.extend('clike', {\n      string: [\n        {\n          pattern: /`(?:\\\\`|\\\\?[^`]{1,2})`/,\n          // using {1,2} instead of `u` flag for compatibility\n          alias: 'rune'\n        },\n        {\n          pattern: /r?([\"'])(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/,\n          alias: 'quoted-string',\n          greedy: true,\n          inside: {\n            interpolation: {\n              pattern:\n                /((?:^|[^\\\\])(?:\\\\{2})*)\\$(?:\\{[^{}]*\\}|\\w+(?:\\.\\w+(?:\\([^\\(\\)]*\\))?|\\[[^\\[\\]]+\\])*)/,\n              lookbehind: true,\n              inside: {\n                'interpolation-variable': {\n                  pattern: /^\\$\\w[\\s\\S]*$/,\n                  alias: 'variable'\n                },\n                'interpolation-punctuation': {\n                  pattern: /^\\$\\{|\\}$/,\n                  alias: 'punctuation'\n                },\n                'interpolation-expression': interpolationExpr\n              }\n            }\n          }\n        }\n      ],\n      'class-name': {\n        pattern: /(\\b(?:enum|interface|struct|type)\\s+)(?:C\\.)?\\w+/,\n        lookbehind: true\n      },\n      keyword:\n        /(?:\\b(?:as|asm|assert|atomic|break|chan|const|continue|defer|else|embed|enum|fn|for|__global|go(?:to)?|if|import|in|interface|is|lock|match|module|mut|none|or|pub|return|rlock|select|shared|sizeof|static|struct|type(?:of)?|union|unsafe)|\\$(?:if|else|for)|#(?:include|flag))\\b/,\n      number:\n        /\\b(?:0x[a-f\\d]+(?:_[a-f\\d]+)*|0b[01]+(?:_[01]+)*|0o[0-7]+(?:_[0-7]+)*|\\d+(?:_\\d+)*(?:\\.\\d+(?:_\\d+)*)?)\\b/i,\n      operator:\n        /~|\\?|[*\\/%^!=]=?|\\+[=+]?|-[=-]?|\\|[=|]?|&(?:=|&|\\^=?)?|>(?:>=?|=)?|<(?:<=?|=|-)?|:=|\\.\\.\\.?/,\n      builtin:\n        /\\b(?:any(?:_int|_float)?|bool|byte(?:ptr)?|charptr|f(?:32|64)|i(?:8|16|nt|64|128)|rune|size_t|string|u(?:16|32|64|128)|voidptr)\\b/\n    })\n    interpolationExpr.inside = Prism.languages.v\n    Prism.languages.insertBefore('v', 'operator', {\n      attribute: {\n        pattern:\n          /(^[\\t ]*)\\[(?:deprecated|unsafe_fn|typedef|live|inline|flag|ref_only|windows_stdcall|direct_array_access)\\]/m,\n        lookbehind: true,\n        alias: 'annotation',\n        inside: {\n          punctuation: /[\\[\\]]/,\n          keyword: /\\w+/\n        }\n      },\n      generic: {\n        pattern: /<\\w+>(?=\\s*[\\)\\{])/,\n        inside: {\n          punctuation: /[<>]/,\n          'class-name': /\\w+/\n        }\n      }\n    })\n    Prism.languages.insertBefore('v', 'function', {\n      'generic-function': {\n        // e.g. foo<T>( ...\n        pattern: /\\b\\w+\\s*<\\w+>(?=\\()/,\n        inside: {\n          function: /^\\w+/,\n          generic: {\n            pattern: /<\\w+>/,\n            inside: Prism.languages.v.generic.inside\n          }\n        }\n      }\n    })\n  })(Prism)\n}\n"]},"metadata":{},"sourceType":"script"}