{"ast":null,"code":"'use strict';\n\nvar refractorMarkupTemplating = require('./markup-templating.js');\n\nmodule.exports = liquid;\nliquid.displayName = 'liquid';\nliquid.aliases = [];\n\nfunction liquid(Prism) {\n  Prism.register(refractorMarkupTemplating);\n  Prism.languages.liquid = {\n    comment: {\n      pattern: /(^\\{%\\s*comment\\s*%\\})[\\s\\S]+(?=\\{%\\s*endcomment\\s*%\\}$)/,\n      lookbehind: true\n    },\n    delimiter: {\n      pattern: /^\\{(?:\\{\\{|[%\\{])-?|-?(?:\\}\\}|[%\\}])\\}$/,\n      alias: 'punctuation'\n    },\n    string: {\n      pattern: /\"[^\"]*\"|'[^']*'/,\n      greedy: true\n    },\n    keyword: /\\b(?:as|assign|break|continue|cycle|decrement|echo|else|elsif|(?:end)?(?:capture|case|comment|for|form|if|paginate|style|raw|tablerow|unless)|in|include|increment|limit|liquid|offset|range|render|reversed|section|when|with)\\b/,\n    function: [{\n      pattern: /(\\|\\s*)\\w+/,\n      lookbehind: true,\n      alias: 'filter'\n    }, {\n      // array functions\n      pattern: /(\\.\\s*)(?:first|last|size)/,\n      lookbehind: true\n    }],\n    boolean: /\\b(?:true|false|nil)\\b/,\n    range: {\n      pattern: /\\.\\./,\n      alias: 'operator'\n    },\n    // https://github.com/Shopify/liquid/blob/698f5e0d967423e013f6169d9111bd969bd78337/lib/liquid/lexer.rb#L21\n    number: /\\b\\d+(?:\\.\\d+)?\\b/,\n    operator: /[!=]=|<>|[<>]=?|[|?:=-]|\\b(?:and|or|contains(?=\\s))\\b/,\n    punctuation: /[.,\\[\\]()]/\n  };\n  Prism.hooks.add('before-tokenize', function (env) {\n    var liquidPattern = /\\{%\\s*comment\\s*%\\}[\\s\\S]*?\\{%\\s*endcomment\\s*%\\}|\\{(?:%[\\s\\S]*?%|\\{\\{[\\s\\S]*?\\}\\}|\\{[\\s\\S]*?\\})\\}/g;\n    var insideRaw = false;\n    Prism.languages['markup-templating'].buildPlaceholders(env, 'liquid', liquidPattern, function (match) {\n      var tagMatch = /^\\{%-?\\s*(\\w+)/.exec(match);\n\n      if (tagMatch) {\n        var tag = tagMatch[1];\n\n        if (tag === 'raw' && !insideRaw) {\n          insideRaw = true;\n          return true;\n        } else if (tag === 'endraw') {\n          insideRaw = false;\n          return true;\n        }\n      }\n\n      return !insideRaw;\n    });\n  });\n  Prism.hooks.add('after-tokenize', function (env) {\n    Prism.languages['markup-templating'].tokenizePlaceholders(env, 'liquid');\n  });\n}","map":{"version":3,"sources":["/Users/jianlan/Documents/GitHub/site/node_modules/refractor/lang/liquid.js"],"names":["refractorMarkupTemplating","require","module","exports","liquid","displayName","aliases","Prism","register","languages","comment","pattern","lookbehind","delimiter","alias","string","greedy","keyword","function","boolean","range","number","operator","punctuation","hooks","add","env","liquidPattern","insideRaw","buildPlaceholders","match","tagMatch","exec","tag","tokenizePlaceholders"],"mappings":"AAAA;;AACA,IAAIA,yBAAyB,GAAGC,OAAO,CAAC,wBAAD,CAAvC;;AACAC,MAAM,CAACC,OAAP,GAAiBC,MAAjB;AACAA,MAAM,CAACC,WAAP,GAAqB,QAArB;AACAD,MAAM,CAACE,OAAP,GAAiB,EAAjB;;AACA,SAASF,MAAT,CAAgBG,KAAhB,EAAuB;AACrBA,EAAAA,KAAK,CAACC,QAAN,CAAeR,yBAAf;AACAO,EAAAA,KAAK,CAACE,SAAN,CAAgBL,MAAhB,GAAyB;AACvBM,IAAAA,OAAO,EAAE;AACPC,MAAAA,OAAO,EAAE,0DADF;AAEPC,MAAAA,UAAU,EAAE;AAFL,KADc;AAKvBC,IAAAA,SAAS,EAAE;AACTF,MAAAA,OAAO,EAAE,yCADA;AAETG,MAAAA,KAAK,EAAE;AAFE,KALY;AASvBC,IAAAA,MAAM,EAAE;AACNJ,MAAAA,OAAO,EAAE,iBADH;AAENK,MAAAA,MAAM,EAAE;AAFF,KATe;AAavBC,IAAAA,OAAO,EACL,mOAdqB;AAevBC,IAAAA,QAAQ,EAAE,CACR;AACEP,MAAAA,OAAO,EAAE,YADX;AAEEC,MAAAA,UAAU,EAAE,IAFd;AAGEE,MAAAA,KAAK,EAAE;AAHT,KADQ,EAMR;AACE;AACAH,MAAAA,OAAO,EAAE,4BAFX;AAGEC,MAAAA,UAAU,EAAE;AAHd,KANQ,CAfa;AA2BvBO,IAAAA,OAAO,EAAE,wBA3Bc;AA4BvBC,IAAAA,KAAK,EAAE;AACLT,MAAAA,OAAO,EAAE,MADJ;AAELG,MAAAA,KAAK,EAAE;AAFF,KA5BgB;AAgCvB;AACAO,IAAAA,MAAM,EAAE,mBAjCe;AAkCvBC,IAAAA,QAAQ,EAAE,uDAlCa;AAmCvBC,IAAAA,WAAW,EAAE;AAnCU,GAAzB;AAqCAhB,EAAAA,KAAK,CAACiB,KAAN,CAAYC,GAAZ,CAAgB,iBAAhB,EAAmC,UAAUC,GAAV,EAAe;AAChD,QAAIC,aAAa,GACf,qGADF;AAEA,QAAIC,SAAS,GAAG,KAAhB;AACArB,IAAAA,KAAK,CAACE,SAAN,CAAgB,mBAAhB,EAAqCoB,iBAArC,CACEH,GADF,EAEE,QAFF,EAGEC,aAHF,EAIE,UAAUG,KAAV,EAAiB;AACf,UAAIC,QAAQ,GAAG,iBAAiBC,IAAjB,CAAsBF,KAAtB,CAAf;;AACA,UAAIC,QAAJ,EAAc;AACZ,YAAIE,GAAG,GAAGF,QAAQ,CAAC,CAAD,CAAlB;;AACA,YAAIE,GAAG,KAAK,KAAR,IAAiB,CAACL,SAAtB,EAAiC;AAC/BA,UAAAA,SAAS,GAAG,IAAZ;AACA,iBAAO,IAAP;AACD,SAHD,MAGO,IAAIK,GAAG,KAAK,QAAZ,EAAsB;AAC3BL,UAAAA,SAAS,GAAG,KAAZ;AACA,iBAAO,IAAP;AACD;AACF;;AACD,aAAO,CAACA,SAAR;AACD,KAjBH;AAmBD,GAvBD;AAwBArB,EAAAA,KAAK,CAACiB,KAAN,CAAYC,GAAZ,CAAgB,gBAAhB,EAAkC,UAAUC,GAAV,EAAe;AAC/CnB,IAAAA,KAAK,CAACE,SAAN,CAAgB,mBAAhB,EAAqCyB,oBAArC,CAA0DR,GAA1D,EAA+D,QAA/D;AACD,GAFD;AAGD","sourcesContent":["'use strict'\nvar refractorMarkupTemplating = require('./markup-templating.js')\nmodule.exports = liquid\nliquid.displayName = 'liquid'\nliquid.aliases = []\nfunction liquid(Prism) {\n  Prism.register(refractorMarkupTemplating)\n  Prism.languages.liquid = {\n    comment: {\n      pattern: /(^\\{%\\s*comment\\s*%\\})[\\s\\S]+(?=\\{%\\s*endcomment\\s*%\\}$)/,\n      lookbehind: true\n    },\n    delimiter: {\n      pattern: /^\\{(?:\\{\\{|[%\\{])-?|-?(?:\\}\\}|[%\\}])\\}$/,\n      alias: 'punctuation'\n    },\n    string: {\n      pattern: /\"[^\"]*\"|'[^']*'/,\n      greedy: true\n    },\n    keyword:\n      /\\b(?:as|assign|break|continue|cycle|decrement|echo|else|elsif|(?:end)?(?:capture|case|comment|for|form|if|paginate|style|raw|tablerow|unless)|in|include|increment|limit|liquid|offset|range|render|reversed|section|when|with)\\b/,\n    function: [\n      {\n        pattern: /(\\|\\s*)\\w+/,\n        lookbehind: true,\n        alias: 'filter'\n      },\n      {\n        // array functions\n        pattern: /(\\.\\s*)(?:first|last|size)/,\n        lookbehind: true\n      }\n    ],\n    boolean: /\\b(?:true|false|nil)\\b/,\n    range: {\n      pattern: /\\.\\./,\n      alias: 'operator'\n    },\n    // https://github.com/Shopify/liquid/blob/698f5e0d967423e013f6169d9111bd969bd78337/lib/liquid/lexer.rb#L21\n    number: /\\b\\d+(?:\\.\\d+)?\\b/,\n    operator: /[!=]=|<>|[<>]=?|[|?:=-]|\\b(?:and|or|contains(?=\\s))\\b/,\n    punctuation: /[.,\\[\\]()]/\n  }\n  Prism.hooks.add('before-tokenize', function (env) {\n    var liquidPattern =\n      /\\{%\\s*comment\\s*%\\}[\\s\\S]*?\\{%\\s*endcomment\\s*%\\}|\\{(?:%[\\s\\S]*?%|\\{\\{[\\s\\S]*?\\}\\}|\\{[\\s\\S]*?\\})\\}/g\n    var insideRaw = false\n    Prism.languages['markup-templating'].buildPlaceholders(\n      env,\n      'liquid',\n      liquidPattern,\n      function (match) {\n        var tagMatch = /^\\{%-?\\s*(\\w+)/.exec(match)\n        if (tagMatch) {\n          var tag = tagMatch[1]\n          if (tag === 'raw' && !insideRaw) {\n            insideRaw = true\n            return true\n          } else if (tag === 'endraw') {\n            insideRaw = false\n            return true\n          }\n        }\n        return !insideRaw\n      }\n    )\n  })\n  Prism.hooks.add('after-tokenize', function (env) {\n    Prism.languages['markup-templating'].tokenizePlaceholders(env, 'liquid')\n  })\n}\n"]},"metadata":{},"sourceType":"script"}