{"ast":null,"code":"var _jsxFileName = \"/Users/jianlan/Documents/GitHub/site/src/pages/notifications/Notifications.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { Grid } from \"@material-ui/core\";\nimport { Close as CloseIcon } from \"@material-ui/icons\";\nimport { ToastContainer, toast } from \"react-toastify\";\nimport SyntaxHighlighter from \"react-syntax-highlighter\";\nimport { docco } from \"react-syntax-highlighter/dist/esm/styles/hljs\";\nimport classnames from \"classnames\"; // styles\n\nimport \"react-toastify/dist/ReactToastify.css\";\nimport useStyles from \"./styles\"; // components\n\nimport Widget from \"../../components/Widget/Widget\";\nimport PageTitle from \"../../components/PageTitle/PageTitle\";\nimport Notification from \"../../components/Notification\";\nimport { Typography, Button } from \"../../components/Wrappers/Wrappers\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst positions = [toast.POSITION.TOP_LEFT, toast.POSITION.TOP_CENTER, toast.POSITION.TOP_RIGHT, toast.POSITION.BOTTOM_LEFT, toast.POSITION.BOTTOM_CENTER, toast.POSITION.BOTTOM_RIGHT];\nexport default function NotificationsPage(props) {\n  _s();\n\n  var classes = useStyles(); // local\n\n  var [notificationsPosition, setNotificationPosition] = useState(2);\n  var [errorToastId, setErrorToastId] = useState(null);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(PageTitle, {\n      title: \"State Infographics\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      spacing: 4,\n      children: /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12,\n        children: /*#__PURE__*/_jsxDEV(Widget, {\n          disableWidgetMenu: true,\n          title: \"Introduction\",\n          children: /*#__PURE__*/_jsxDEV(Grid, {\n            container: true,\n            item: true,\n            xs: 12,\n            children: /*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"Please select a state or territory in the drop-down menu below and click \\u201CCreate infographic\\u201D to generate a 1-page infographic describing its respective CKD and T2D cohorts. The infographic is specific to a single state or territory and can be downloaded as an image file and saved for later use.\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 44,\n              columnNumber: 11\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 43,\n            columnNumber: 11\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true); // #############################################################\n\n  function sendNotification(componentProps, options) {\n    return toast( /*#__PURE__*/_jsxDEV(Notification, { ...componentProps,\n      className: classes.notificationComponent\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this), options);\n  }\n\n  function retryErrorNotification() {\n    var componentProps = {\n      type: \"message\",\n      message: \"Message was sent successfully!\",\n      variant: \"contained\",\n      color: \"success\"\n    };\n    toast.update(errorToastId, {\n      render: /*#__PURE__*/_jsxDEV(Notification, { ...componentProps\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 15\n      }, this),\n      type: \"success\"\n    });\n    setErrorToastId(null);\n  }\n\n  function handleNotificationCall(notificationType) {\n    var componentProps;\n    if (errorToastId && notificationType === \"error\") return;\n\n    switch (notificationType) {\n      case \"info\":\n        componentProps = {\n          type: \"feedback\",\n          message: \"New user feedback received\",\n          variant: \"contained\",\n          color: \"primary\"\n        };\n        break;\n\n      case \"error\":\n        componentProps = {\n          type: \"message\",\n          message: \"Message was not sent!\",\n          variant: \"contained\",\n          color: \"secondary\",\n          extraButton: \"Resend\",\n          extraButtonClick: retryErrorNotification\n        };\n        break;\n\n      default:\n        componentProps = {\n          type: \"shipped\",\n          message: \"The item was shipped\",\n          variant: \"contained\",\n          color: \"success\"\n        };\n    }\n\n    var toastId = sendNotification(componentProps, {\n      type: notificationType,\n      position: positions[notificationsPosition],\n      progressClassName: classes.progress,\n      onClose: notificationType === \"error\" && (() => setErrorToastId(null)),\n      className: classes.notification\n    });\n    if (notificationType === \"error\") setErrorToastId(toastId);\n  }\n\n  function changeNotificationPosition(positionId) {\n    setNotificationPosition(positionId);\n  }\n} // #############################################################\n\n_s(NotificationsPage, \"uG1ZdsPE6DQYnkcVXO+4lBWPxJw=\", false, function () {\n  return [useStyles];\n});\n\n_c = NotificationsPage;\n\nfunction CloseButton({\n  closeToast,\n  className\n}) {\n  return /*#__PURE__*/_jsxDEV(CloseIcon, {\n    className: className,\n    onClick: closeToast\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 130,\n    columnNumber: 10\n  }, this);\n}\n\n_c2 = CloseButton;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"NotificationsPage\");\n$RefreshReg$(_c2, \"CloseButton\");","map":{"version":3,"sources":["/Users/jianlan/Documents/GitHub/site/src/pages/notifications/Notifications.js"],"names":["React","useState","Grid","Close","CloseIcon","ToastContainer","toast","SyntaxHighlighter","docco","classnames","useStyles","Widget","PageTitle","Notification","Typography","Button","positions","POSITION","TOP_LEFT","TOP_CENTER","TOP_RIGHT","BOTTOM_LEFT","BOTTOM_CENTER","BOTTOM_RIGHT","NotificationsPage","props","classes","notificationsPosition","setNotificationPosition","errorToastId","setErrorToastId","sendNotification","componentProps","options","notificationComponent","retryErrorNotification","type","message","variant","color","update","render","handleNotificationCall","notificationType","extraButton","extraButtonClick","toastId","position","progressClassName","progress","onClose","className","notification","changeNotificationPosition","positionId","CloseButton","closeToast"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport { Grid } from \"@material-ui/core\";\nimport { Close as CloseIcon } from \"@material-ui/icons\";\nimport { ToastContainer, toast } from \"react-toastify\";\nimport SyntaxHighlighter from \"react-syntax-highlighter\";\nimport { docco } from \"react-syntax-highlighter/dist/esm/styles/hljs\";\nimport classnames from \"classnames\";\n\n// styles\nimport \"react-toastify/dist/ReactToastify.css\";\nimport useStyles from \"./styles\";\n\n// components\nimport Widget from \"../../components/Widget/Widget\";\nimport PageTitle from \"../../components/PageTitle/PageTitle\";\nimport Notification from \"../../components/Notification\";\nimport { Typography, Button } from \"../../components/Wrappers/Wrappers\";\n\nconst positions = [\n  toast.POSITION.TOP_LEFT,\n  toast.POSITION.TOP_CENTER,\n  toast.POSITION.TOP_RIGHT,\n  toast.POSITION.BOTTOM_LEFT,\n  toast.POSITION.BOTTOM_CENTER,\n  toast.POSITION.BOTTOM_RIGHT,\n];\n\nexport default function NotificationsPage(props) {\n  var classes = useStyles();\n\n  // local\n  var [notificationsPosition, setNotificationPosition] = useState(2);\n  var [errorToastId, setErrorToastId] = useState(null);\n\n  return (\n    <>\n      <PageTitle title=\"State Infographics\" />\n      <Grid container spacing={4}>\n        \n        <Grid item xs={12}>\n        <Widget disableWidgetMenu\n        title=\"Introduction\">\n          <Grid container item xs={12}>\n          <p>Please select a state or territory in the drop-down menu below and click “Create infographic” to generate a 1-page infographic describing its respective CKD and T2D cohorts. The infographic is specific to a single state or territory and can be downloaded as an image file and saved for later use.</p>\n            \n          </Grid>\n          </Widget>\n        </Grid>\n        \n      </Grid>\n    </>\n  );\n\n  // #############################################################\n  function sendNotification(componentProps, options) {\n    return toast(\n      <Notification\n        {...componentProps}\n        className={classes.notificationComponent}\n      />,\n      options,\n    );\n  }\n\n  function retryErrorNotification() {\n    var componentProps = {\n      type: \"message\",\n      message: \"Message was sent successfully!\",\n      variant: \"contained\",\n      color: \"success\",\n    };\n    toast.update(errorToastId, {\n      render: <Notification {...componentProps} />,\n      type: \"success\",\n    });\n    setErrorToastId(null);\n  }\n\n  function handleNotificationCall(notificationType) {\n    var componentProps;\n\n    if (errorToastId && notificationType === \"error\") return;\n\n    switch (notificationType) {\n      case \"info\":\n        componentProps = {\n          type: \"feedback\",\n          message: \"New user feedback received\",\n          variant: \"contained\",\n          color: \"primary\",\n        };\n        break;\n      case \"error\":\n        componentProps = {\n          type: \"message\",\n          message: \"Message was not sent!\",\n          variant: \"contained\",\n          color: \"secondary\",\n          extraButton: \"Resend\",\n          extraButtonClick: retryErrorNotification,\n        };\n        break;\n      default:\n        componentProps = {\n          type: \"shipped\",\n          message: \"The item was shipped\",\n          variant: \"contained\",\n          color: \"success\",\n        };\n    }\n\n    var toastId = sendNotification(componentProps, {\n      type: notificationType,\n      position: positions[notificationsPosition],\n      progressClassName: classes.progress,\n      onClose: notificationType === \"error\" && (() => setErrorToastId(null)),\n      className: classes.notification,\n    });\n\n    if (notificationType === \"error\") setErrorToastId(toastId);\n  }\n\n  function changeNotificationPosition(positionId) {\n    setNotificationPosition(positionId);\n  }\n}\n\n// #############################################################\nfunction CloseButton({ closeToast, className }) {\n  return <CloseIcon className={className} onClick={closeToast} />;\n}\n"]},"metadata":{},"sourceType":"module"}