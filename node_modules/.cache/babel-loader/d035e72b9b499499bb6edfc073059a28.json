{"ast":null,"code":"'use strict';\n\nmodule.exports = log;\nlog.displayName = 'log';\nlog.aliases = [];\n\nfunction log(Prism) {\n  // This is a language definition for generic log files.\n  // Since there is no one log format, this language definition has to support all formats to some degree.\n  //\n  // Based on https://github.com/MTDL9/vim-log-highlighting\n  Prism.languages.log = {\n    string: {\n      // Single-quoted strings must not be confused with plain text. E.g. Can't isn't Susan's Chris' toy\n      pattern: /\"(?:[^\"\\\\\\r\\n]|\\\\.)*\"|'(?![st] | \\w)(?:[^'\\\\\\r\\n]|\\\\.)*'/,\n      greedy: true\n    },\n    level: [{\n      pattern: /\\b(?:ALERT|CRIT|CRITICAL|EMERG|EMERGENCY|ERR|ERROR|FAILURE|FATAL|SEVERE)\\b/,\n      alias: ['error', 'important']\n    }, {\n      pattern: /\\b(?:WARN|WARNING|WRN)\\b/,\n      alias: ['warning', 'important']\n    }, {\n      pattern: /\\b(?:DISPLAY|INF|INFO|NOTICE|STATUS)\\b/,\n      alias: ['info', 'keyword']\n    }, {\n      pattern: /\\b(?:DBG|DEBUG|FINE)\\b/,\n      alias: ['debug', 'keyword']\n    }, {\n      pattern: /\\b(?:FINER|FINEST|TRACE|TRC|VERBOSE|VRB)\\b/,\n      alias: ['trace', 'comment']\n    }],\n    property: {\n      pattern: /((?:^|[\\]|])[ \\t]*)[a-z_](?:[\\w-]|\\b\\/\\b)*(?:[. ]\\(?\\w(?:[\\w-]|\\b\\/\\b)*\\)?)*:(?=\\s)/im,\n      lookbehind: true\n    },\n    separator: {\n      pattern: /(^|[^-+])-{3,}|={3,}|\\*{3,}|- - /m,\n      lookbehind: true,\n      alias: 'comment'\n    },\n    url: /\\b(?:https?|ftp|file):\\/\\/[^\\s|,;'\"]*[^\\s|,;'\">.]/,\n    email: {\n      pattern: /(^|\\s)[-\\w+.]+@[a-z][a-z0-9-]*(?:\\.[a-z][a-z0-9-]*)+(?=\\s)/,\n      lookbehind: true,\n      alias: 'url'\n    },\n    'ip-address': {\n      pattern: /\\b(?:\\d{1,3}(?:\\.\\d{1,3}){3})\\b/i,\n      alias: 'constant'\n    },\n    'mac-address': {\n      pattern: /\\b[a-f0-9]{2}(?::[a-f0-9]{2}){5}\\b/i,\n      alias: 'constant'\n    },\n    domain: {\n      pattern: /(^|\\s)[a-z][a-z0-9-]*(?:\\.[a-z][a-z0-9-]*)*\\.[a-z][a-z0-9-]+(?=\\s)/,\n      lookbehind: true,\n      alias: 'constant'\n    },\n    uuid: {\n      pattern: /\\b[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}\\b/i,\n      alias: 'constant'\n    },\n    hash: {\n      pattern: /\\b(?:[a-f0-9]{32}){1,2}\\b/i,\n      alias: 'constant'\n    },\n    'file-path': {\n      pattern: /\\b[a-z]:[\\\\/][^\\s|,;:(){}\\[\\]\"']+|(^|[\\s:\\[\\](>|])\\.{0,2}\\/\\w[^\\s|,;:(){}\\[\\]\"']*/i,\n      lookbehind: true,\n      greedy: true,\n      alias: 'string'\n    },\n    date: {\n      pattern: RegExp(/\\b\\d{4}[-/]\\d{2}[-/]\\d{2}(?:T(?=\\d{1,2}:)|(?=\\s\\d{1,2}:))/.source + '|' + /\\b\\d{1,4}[-/ ](?:\\d{1,2}|Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)[-/ ]\\d{2,4}T?\\b/.source + '|' + /\\b(?:(?:Mon|Tue|Wed|Thu|Fri|Sat|Sun)(?:\\s{1,2}(?:Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec))?|Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\\s{1,2}\\d{1,2}\\b/.source, 'i'),\n      alias: 'number'\n    },\n    time: {\n      pattern: /\\b\\d{1,2}:\\d{1,2}:\\d{1,2}(?:[.,:]\\d+)?(?:\\s?[+-]\\d{2}:?\\d{2}|Z)?\\b/,\n      alias: 'number'\n    },\n    boolean: /\\b(?:true|false|null)\\b/i,\n    number: {\n      pattern: /(^|[^.\\w])(?:0x[a-f0-9]+|0o[0-7]+|0b[01]+|v?\\d[\\da-f]*(?:\\.\\d+)*(?:e[+-]?\\d+)?[a-z]{0,3}\\b)\\b(?!\\.\\w)/i,\n      lookbehind: true\n    },\n    operator: /[;:?<=>~/@!$%&+\\-|^(){}*#]/,\n    punctuation: /[\\[\\].,]/\n  };\n}","map":{"version":3,"sources":["/Users/jianlan/Documents/GitHub/bayer-frontend/node_modules/refractor/lang/log.js"],"names":["module","exports","log","displayName","aliases","Prism","languages","string","pattern","greedy","level","alias","property","lookbehind","separator","url","email","domain","uuid","hash","date","RegExp","source","time","boolean","number","operator","punctuation"],"mappings":"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","sourcesContent":["'use strict'\n\nmodule.exports = log\nlog.displayName = 'log'\nlog.aliases = []\nfunction log(Prism) {\n  // This is a language definition for generic log files.\n  // Since there is no one log format, this language definition has to support all formats to some degree.\n  //\n  // Based on https://github.com/MTDL9/vim-log-highlighting\n  Prism.languages.log = {\n    string: {\n      // Single-quoted strings must not be confused with plain text. E.g. Can't isn't Susan's Chris' toy\n      pattern: /\"(?:[^\"\\\\\\r\\n]|\\\\.)*\"|'(?![st] | \\w)(?:[^'\\\\\\r\\n]|\\\\.)*'/,\n      greedy: true\n    },\n    level: [\n      {\n        pattern:\n          /\\b(?:ALERT|CRIT|CRITICAL|EMERG|EMERGENCY|ERR|ERROR|FAILURE|FATAL|SEVERE)\\b/,\n        alias: ['error', 'important']\n      },\n      {\n        pattern: /\\b(?:WARN|WARNING|WRN)\\b/,\n        alias: ['warning', 'important']\n      },\n      {\n        pattern: /\\b(?:DISPLAY|INF|INFO|NOTICE|STATUS)\\b/,\n        alias: ['info', 'keyword']\n      },\n      {\n        pattern: /\\b(?:DBG|DEBUG|FINE)\\b/,\n        alias: ['debug', 'keyword']\n      },\n      {\n        pattern: /\\b(?:FINER|FINEST|TRACE|TRC|VERBOSE|VRB)\\b/,\n        alias: ['trace', 'comment']\n      }\n    ],\n    property: {\n      pattern:\n        /((?:^|[\\]|])[ \\t]*)[a-z_](?:[\\w-]|\\b\\/\\b)*(?:[. ]\\(?\\w(?:[\\w-]|\\b\\/\\b)*\\)?)*:(?=\\s)/im,\n      lookbehind: true\n    },\n    separator: {\n      pattern: /(^|[^-+])-{3,}|={3,}|\\*{3,}|- - /m,\n      lookbehind: true,\n      alias: 'comment'\n    },\n    url: /\\b(?:https?|ftp|file):\\/\\/[^\\s|,;'\"]*[^\\s|,;'\">.]/,\n    email: {\n      pattern: /(^|\\s)[-\\w+.]+@[a-z][a-z0-9-]*(?:\\.[a-z][a-z0-9-]*)+(?=\\s)/,\n      lookbehind: true,\n      alias: 'url'\n    },\n    'ip-address': {\n      pattern: /\\b(?:\\d{1,3}(?:\\.\\d{1,3}){3})\\b/i,\n      alias: 'constant'\n    },\n    'mac-address': {\n      pattern: /\\b[a-f0-9]{2}(?::[a-f0-9]{2}){5}\\b/i,\n      alias: 'constant'\n    },\n    domain: {\n      pattern:\n        /(^|\\s)[a-z][a-z0-9-]*(?:\\.[a-z][a-z0-9-]*)*\\.[a-z][a-z0-9-]+(?=\\s)/,\n      lookbehind: true,\n      alias: 'constant'\n    },\n    uuid: {\n      pattern:\n        /\\b[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}\\b/i,\n      alias: 'constant'\n    },\n    hash: {\n      pattern: /\\b(?:[a-f0-9]{32}){1,2}\\b/i,\n      alias: 'constant'\n    },\n    'file-path': {\n      pattern:\n        /\\b[a-z]:[\\\\/][^\\s|,;:(){}\\[\\]\"']+|(^|[\\s:\\[\\](>|])\\.{0,2}\\/\\w[^\\s|,;:(){}\\[\\]\"']*/i,\n      lookbehind: true,\n      greedy: true,\n      alias: 'string'\n    },\n    date: {\n      pattern: RegExp(\n        /\\b\\d{4}[-/]\\d{2}[-/]\\d{2}(?:T(?=\\d{1,2}:)|(?=\\s\\d{1,2}:))/.source +\n          '|' +\n          /\\b\\d{1,4}[-/ ](?:\\d{1,2}|Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)[-/ ]\\d{2,4}T?\\b/\n            .source +\n          '|' +\n          /\\b(?:(?:Mon|Tue|Wed|Thu|Fri|Sat|Sun)(?:\\s{1,2}(?:Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec))?|Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\\s{1,2}\\d{1,2}\\b/\n            .source,\n        'i'\n      ),\n      alias: 'number'\n    },\n    time: {\n      pattern:\n        /\\b\\d{1,2}:\\d{1,2}:\\d{1,2}(?:[.,:]\\d+)?(?:\\s?[+-]\\d{2}:?\\d{2}|Z)?\\b/,\n      alias: 'number'\n    },\n    boolean: /\\b(?:true|false|null)\\b/i,\n    number: {\n      pattern:\n        /(^|[^.\\w])(?:0x[a-f0-9]+|0o[0-7]+|0b[01]+|v?\\d[\\da-f]*(?:\\.\\d+)*(?:e[+-]?\\d+)?[a-z]{0,3}\\b)\\b(?!\\.\\w)/i,\n      lookbehind: true\n    },\n    operator: /[;:?<=>~/@!$%&+\\-|^(){}*#]/,\n    punctuation: /[\\[\\].,]/\n  }\n}\n"]},"metadata":{},"sourceType":"script"}